# run_verify.ps1 v2 — Institutional Verify (one-step, robust)
[CmdletBinding()]
param(
  [string]$Tag="v4.0",
  [string]$Repo="caf-system/CAF-Release",
  [switch]$SkipQuick
)
$ErrorActionPreference='Stop'; Set-StrictMode -Version Latest
function W($t,$k="STEP"){ $c=@{STEP="Cyan";OK="Green";WARN="Yellow";ERR="Red"}[$k]; Write-Host ("[{0}] {1}" -f $k,$t) -ForegroundColor $c }

$root = (& git rev-parse --show-toplevel 2>$null); if(-not $root){ throw "Run from repo root (use 'root')." }
Set-Location $root

$docs = Join-Path $root "docs"
$sbom = Join-Path $docs "sbom\sbom.cdx.json"
$vex  = Join-Path $docs "vex\vex.cdx.json"
$sums = Join-Path $root "SHA256SUMS.txt"
$sumsSig = "$sums.asc"
$policy = Join-Path $root "RELEASE_POLICY.md"
$attrib = Join-Path $root "ATTRIBUTION\THIRD-PARTY-LICENSES.md"
$key = Join-Path $root "keys\CAF-GPG-KEY.asc"
$manifest = Join-Path $root "DealBundle_Manifest.txt"
$manifestAsc = "$manifest.asc"

# 0. Presence
foreach($f in @($sbom, "$sbom.asc", $vex, "$vex.asc", $sums, $sumsSig, $policy, $attrib, $key, $manifest, $manifestAsc)){
  if(-not (Test-Path $f)){ throw "Missing file: $f" } else { W "$f found" "OK" }
}

# 1. GPG import
& gpg --import $key | Out-Null

# 2. Signatures
W "Verifying SHA256SUMS.txt.asc"
& gpg --verify $sumsSig $sums 2>$null; if($LASTEXITCODE -ne 0){ throw "GPG verify FAILED: SHA256SUMS.txt.asc" } else { W "SHA256SUMS signature valid" "OK" }

W "Verifying SBOM signature"
& gpg --verify "$sbom.asc" "$sbom" 2>$null; if($LASTEXITCODE -ne 0){ throw "GPG verify FAILED: sbom.cdx.json.asc" } else { W "SBOM signature valid" "OK" }

W "Verifying VEX signature"
& gpg --verify "$vex.asc" "$vex" 2>$null; if($LASTEXITCODE -ne 0){ throw "GPG verify FAILED: vex.cdx.json.asc" } else { W "VEX signature valid" "OK" }

W "Verifying DealBundle Manifest signature"
& gpg --verify $manifestAsc $manifest 2>$null; if($LASTEXITCODE -ne 0){ throw "GPG verify FAILED: DealBundle_Manifest.txt.asc" } else { W "DealBundle Manifest signature valid" "OK" }

# 3. Checksums consistency
W "Recalculating checksums"
$lines = Get-Content $sums -Raw -ErrorAction Stop -Encoding UTF8 -ea 0
$bad = @()
# учитывать пути с пробелами: берём всё после хеша
foreach($m in ([regex]::Matches($lines, '^(?<h>[0-9a-f]{64})\s+(?<f>.+)$', 'Multiline'))){
  $h = $m.Groups['h'].Value
  $f = $m.Groups['f'].Value
  if(-not (Test-Path $f)){ continue }
  $calc = (Get-FileHash -Algorithm SHA256 -Path $f).Hash.ToLower()
  if($calc -ne $h){ $bad += $f }
}
if($bad.Count -gt 0){ throw ("Checksum mismatch: " + ($bad -join ', ')) } else { W "All checksums match" "OK" }

# 4. Signed tag
W "Verifying signed tag $Tag"
& git tag -v $Tag 2>&1 | Tee-Object -FilePath "GIT_TAG_VERIFY.txt" | Out-Null
if($LASTEXITCODE -ne 0){ throw "Tag signature invalid" } else { W "Tag signature valid" "OK" }

# 5. Summary
$repourl = & git config --get remote.origin.url
$head = (& git rev-parse --short HEAD).Trim()
Write-Host ""
Write-Host "========= VERIFY SUMMARY =========" -ForegroundColor Magenta
Write-Host "Repo: $repourl"
Write-Host "Tag:  $Tag"
Write-Host "Commit: $head"
Write-Host "SBOM: OK"
Write-Host "VEX:  OK"
Write-Host "Checksums: OK"
Write-Host "Signatures: OK"
Write-Host "Tag Signature: OK"
Write-Host "=================================="